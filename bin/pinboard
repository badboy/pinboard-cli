#!/usr/bin/env ruby
# encoding: utf-8

require 'time'
require 'yajl/json_gem'
require 'ostruct'
require 'optparse'
require 'pinboard'

CACHE_FILE = File.expand_path("~/.pinboard-cache.json")
TOKEN_FILE = File.expand_path("~/.pinboard-token")

Color = OpenStruct.new
if $stdout.tty?
  COLORS = {
    clear:   "\033[0m",
    red:     "\033[31m",
    green:   "\033[32m",
    yellow:  "\033[33m",
    cyan:    "\033[36m",
    grey:    "\033[1;30m",
    purple:  "\033[35m"
  }
else
  COLORS = {}
end

$options = {
  what_to_search:  :description,
  and_search:      true,
  color:           true,
  update:          false
}

optparser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename $0} [options] [keywords...]"

  opts.separator ""
  opts.separator "Configuration:"
  opts.separator "  Put your Pinboard API key into #{TOKEN_FILE}"
  opts.separator "  You can find that key here: https://pinboard.in/settings/password"
  opts.separator ""

  opts.on('-a', '--all', 'Search everything (href, description, extended, tags)') do
    $options[:what_to_search] = :all
  end

  opts.on('-d', '--description', 'Search only description (default)') do
    $options[:what_to_search] = :description
  end

  opts.on('-e', '--extended', 'Search only extended') do
    $options[:what_to_search] = :extended
  end

  opts.on('-t', '--tags', 'Search only tags') do
    $options[:what_to_search] = :tags
  end

  opts.on('-o', '--or', 'OR keywords') do
    $options[:and_search] = false
  end

  opts.on('-u', '--update', 'Update if neccessary') do
    $options[:update] = true
  end

  opts.on('-n', '--[no-]color', 'Suppress color output') do |color|
    $options[:color] = color
  end
end

optparser.parse!(ARGV)

def colorize color, word
  if $options[:color]
    "#{COLORS[color]}#{word}#{COLORS[:clear]}"
  else
    word
  end
end

def save_cache file, cache
  File.open(file, "w") { |f|
    f.write cache.to_json
  }
end

cached = JSON.parse(IO.read(CACHE_FILE)) rescue {}

token = IO.read(TOKEN_FILE).chomp

need_update = $options[:update] || cached.empty?

if need_update
  print "Checking for an update... "
  pin = Pinboard::Client.new token: token
  last_check = DateTime.parse(cached['time'] || "01.01.1970").to_time
  last_update = pin.update

  if last_update > last_check
    puts colorize(:red, 'Data outdated. Start with -u to update.')
    puts colorize(:green, 'Oh, you did. Updating now.')
    cached['time'] = last_update

    posts = pin.posts
    cached['posts'] = JSON.parse(posts.to_json)
  else
    puts colorize(:green, "not needed")
  end
  puts
end

save_cache(CACHE_FILE, cached)

def all args, post, regex
  description(args, post, regex) ||
    extended(args, post, regex) ||
    post.href =~ regex
end

def description args, post, regex
  if $options[:and_search]
    args.all? { |arg|
      post.description =~ /#{arg}/i
    }
  else
    post.description =~ regex
  end
end

def extended args, post, regex
  if $options[:and_search]
    args.all? { |arg|
      post.extended =~ /#{arg}/i
    }
  else
    post.extended =~ regex
  end
end

def tags args, post, regex
  if $options[:and_search]
    args.all? { |arg|
      post.tag.any? { |tag|
        tag =~ /#{arg}/
      }
    }
  else
    post.tag.any? { |tag|
      tag =~ regex
    }
  end
end

def build_regex args
  regex = ARGV.map { |arg| Regexp.escape arg }.join("|")
  regex = /#{regex}/i
end

unless ARGV.empty?
  regex = build_regex(ARGV)

  cached['posts'].each do |args|
    args = Pinboard::Util.symbolize_keys(args)
    args[:tag] = args[:tag].join(" ")
    post = Pinboard::Post.new args

    if send($options[:what_to_search], ARGV, post, regex)
      puts "#{colorize :green, post.description}:\n\t#{post.href}"
    end
  end
end
